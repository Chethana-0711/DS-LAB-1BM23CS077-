#include <stdio.h>
#include <stdlib.h>

#define MAX 10

struct Queue {
    int items[MAX];
    int front;
    int rear;
};

void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isEmpty(struct Queue* q) {
    return q->front == -1;
}

int isFull(struct Queue* q) {
    return q->rear == MAX - 1;
}

void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}

int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    int item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return item;
}

void bfs(int graph[MAX][MAX], int visited[MAX], int startVertex, int vertices) {
    struct Queue q;
    initQueue(&q);
    
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        
        for (int i = 0; i < vertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
}

int main() {
    int vertices, startVertex;
    int graph[MAX][MAX] = {0};
    int visited[MAX] = {0};
    printf("chethana,c(1bm23cs077)\n");
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);
    
    printf("BFS Traversal starting from vertex %d: ", startVertex);
    bfs(graph, visited, startVertex, vertices);
    
    return 0;
}
