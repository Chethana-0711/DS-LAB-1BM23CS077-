#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack Underflow\n");
        return -1;
    }
    int value = (*top)->data;
    struct Node* temp = *top;
    *top = (*top)->next;
    free(temp);
    return value;
}

void displayStack(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty.\n");
        return;
    }
    struct Node* temp = top;
    printf("Stack: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (*rear == NULL) {
        *front = *rear = newNode;
        return;
    }
    (*rear)->next = newNode;
    *rear = newNode;
}

int dequeue(struct Node** front) {
    if (*front == NULL) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = (*front)->data;
    struct Node* temp = *front;
    *front = (*front)->next;
    free(temp);
    return value;
}

void displayQueue(struct Node* front) {
    if (front == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    struct Node* temp = front;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* stackTop = NULL;
    struct Node* queueFront = NULL;
    struct Node* queueRear = NULL;
    int choice, value;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Push to Stack\n");
        printf("2. Pop from Stack\n");
        printf("3. Enqueue to Queue\n");
        printf("4. Dequeue from Queue\n");
        printf("5. Display Stack\n");
        printf("6. Display Queue\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter value to push to stack: ");
            scanf("%d", &value);
            push(&stackTop, value);
        }
        else if (choice == 2) {
            value = pop(&stackTop);
            if (value != -1) {
                printf("Popped from stack: %d\n", value);
            }
        }
        else if (choice == 3) {
            printf("Enter value to enqueue to queue: ");
            scanf("%d", &value);
            enqueue(&queueFront, &queueRear, value);
        }
        else if (choice == 4) {
            value = dequeue(&queueFront);
            if (value != -1) {
                printf("Dequeued from queue: %d\n", value);
            }
        }
        else if (choice == 5) {
            displayStack(stackTop);
        }
        else if (choice == 6) {
            displayQueue(queueFront);
        }
        else if (choice == 7) {
            printf("Exiting...\n");
            return 0;
        }
        else {
            printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}

